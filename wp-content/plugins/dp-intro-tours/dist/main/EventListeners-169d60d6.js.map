{"version":3,"sources":["webpack:///./public/assets/js/modules/core/EventListeners.js"],"names":["EventListeners","constructor","this","listeners","getEventId","type","eventId","arguments","length","undefined","Date","getTime","Math","random","toString","add","element","functionRef","addEventListener","remove","_this$listeners$event","removeEventListener","removeAll","Object","keys","forEach"],"mappings":";;;;;;;;;;;;;;;;0HACA,+CAAe,MAAMA,EACpBC,cACCC,KAAKC,UAAY,GAQlBC,WAAWC,GAAuB,IAAjBC,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAC1B,OAAOD,UAAWD,GAAQ,IAAIK,MAAQC,UAAYC,KAAKC,SAASC,SAAS,IAU1EC,IAAIC,EAASX,EAAMY,GAA8B,IAAjBX,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACrCS,GAAWX,GAAQY,IACtBf,KAAKC,UAAUD,KAAKE,WAAWC,EAAMC,IAAY,CAChDD,KAAMA,EACNY,YAAaA,EACbD,QAASA,GAEVA,EAAQE,iBAAiBb,EAAMY,IAUjCE,OAAOb,GACN,GAAIJ,KAAKC,UAAUG,IAAYJ,KAAKC,UAAUG,GAAU,CACvD,MAAAc,EAAuClB,KAAKC,UAAUG,GAA9CU,EAAOI,EAAPJ,QAASX,EAAIe,EAAJf,KAAMY,EAAWG,EAAXH,YACnBD,GAAWX,GAAQY,IACtBD,EAAQK,oBAAoBhB,EAAMY,UAC3Bf,KAAKC,UAAUG,KAQzBgB,YACCC,OAAOC,KAAKtB,KAAKC,WAAWsB,QAAQnB,IACnCJ,KAAKiB,OAAOb","file":"main/EventListeners-169d60d6.js","sourcesContent":["\r\nexport default class EventListeners {\r\n\tconstructor() {\r\n\t\tthis.listeners = {};\r\n\t}\r\n\r\n\t/**\r\n\t * If not eventId set, generate generic ID\r\n\t * @param {string} type event type key\r\n\t * @param {string} eventId event id\r\n\t */\r\n\tgetEventId(type, eventId = null) {\r\n\t\treturn eventId ?? type + (new Date()).getTime() + Math.random().toString(36);\r\n\t}\r\n\t/**\r\n\t * Subscribe event on element and store data for unsubscribe\r\n\t *\r\n\t * @param {Element} element element where event occurs\r\n\t * @param {string} type event type key\r\n\t * @param {Function} functionRef to run while event occurs\r\n\t * @param {string} eventId event id\r\n\t */\r\n\tadd(element, type, functionRef, eventId = null) {\r\n\t\tif (element && type && functionRef) {\r\n\t\t\tthis.listeners[this.getEventId(type, eventId)] = {\r\n\t\t\t\ttype: type,\r\n\t\t\t\tfunctionRef: functionRef,\r\n\t\t\t\telement: element,\r\n\t\t\t};\r\n\t\t\telement.addEventListener(type, functionRef);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Unsubscribe event on element and delete stored data\r\n\t * @param {string} eventId event id\r\n\t*/\r\n\tremove(eventId) {\r\n\t\tif (this.listeners[eventId] && this.listeners[eventId]) {\r\n\t\t\tconst { element, type, functionRef } = this.listeners[eventId];\r\n\t\t\tif (element && type && functionRef) {\r\n\t\t\t\telement.removeEventListener(type, functionRef);\r\n\t\t\t\tdelete this.listeners[eventId];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Unsubscribe all stored events and delete stored data\r\n\t*/\r\n\tremoveAll() {\r\n\t\tObject.keys(this.listeners).forEach(eventId => {\r\n\t\t\tthis.remove(eventId);\r\n\t\t});\r\n\t}\r\n}"],"sourceRoot":""}