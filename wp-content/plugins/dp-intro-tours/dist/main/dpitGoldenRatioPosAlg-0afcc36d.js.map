{"version":3,"sources":["webpack:///./public/assets/js/modules/core/dpitGoldenRatioPosAlg.js"],"names":["calculateSpaceAroundFeature","tooltipBB","maxScreenBB","isLeftOrRight","spaceAroundRatio","width","height","determineGoldenIncrement","spaceAroundFeature","isOverHeight","maxDocBB","closerToTargetBB","tooltipPos","moveCloserToWinBorder","Math","sign","range","base","left","right","top","bottom","floor","modifyTooltipPosition","increment","targetBB","tooltipEl","tooltipMinWidth","bkpTooltipBB","style","round1dec","newWidth","$","outerWidth","ceil1dec","align","newHeight","outerHeight","floor1dec","bkpTooltipHeight","bkpTooltipWidth","currentLeft","getCssValFloat","appliedIncrement","returnResult","wasPosAdjusted","iterations","dpDebugEn","dbgFailedReason","console","log","concat","revertLastModificationAndReturn","lastTooltipInlineStyle","lastIsOverHeight","setAttribute","getInlineStyleOfElement","inlineStyle","getAttribute","cssText","initTooltipBB","maxWinBB","isFixedPos","maxIterations","arguments","length","undefined","initIsOverHeight","includes","lastTooltipBB","lastFeatureSpaceAround","featureSpaceAround","isBestPosFound","featureSpaceAroundDerivation","abs","wasPositionChange","DpitBB","fromElement","maxArea","_lastIsOverHeight","_lastIsOverHeight2","_lastIsOverHeight3","isEqual"],"mappings":"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","file":"main/dpitGoldenRatioPosAlg-0afcc36d.js","sourcesContent":["import { ceil1dec, floor1dec, round1dec } from '../../../../../includes/assets/js/modules/dpitUtilsInc';\r\nimport { getCssValFloat } from '../dpitUtilsPublic';\r\nimport DpitBB from './DpitBB';\r\n\r\n\r\nconst calculateSpaceAroundFeature = (tooltipBB, maxScreenBB, isLeftOrRight) => {\r\n\t// Calculate features\r\n\tlet spaceAroundRatio = {\r\n\t\twidth: tooltipBB.width / maxScreenBB.width,\r\n\t\theight: tooltipBB.height / maxScreenBB.height\r\n\t};\r\n\treturn isLeftOrRight ? spaceAroundRatio.width - spaceAroundRatio.height : spaceAroundRatio.height - spaceAroundRatio.width;\r\n};\r\n\r\nconst determineGoldenIncrement = (spaceAroundFeature, isOverHeight, isLeftOrRight, maxDocBB, tooltipBB, closerToTargetBB, tooltipPos) => {\r\n\tlet moveCloserToWinBorder = Math.sign(spaceAroundFeature) < 0;\r\n\r\n\tif (isOverHeight) moveCloserToWinBorder = isLeftOrRight;\r\n\tlet range = [0, 0];\r\n\tswitch (tooltipPos.base) {\r\n\t\tcase 'left': range = moveCloserToWinBorder ? [maxDocBB.left, tooltipBB.left] : [tooltipBB.left, closerToTargetBB.left]; break;\r\n\t\tcase 'right': range = moveCloserToWinBorder ? [tooltipBB.right, maxDocBB.right] : [closerToTargetBB.right, tooltipBB.right]; break;\r\n\t\tcase 'top': range = moveCloserToWinBorder ? [maxDocBB.top, tooltipBB.top] : [tooltipBB.top, closerToTargetBB.top]; break;\r\n\t\tcase 'bottom': range = moveCloserToWinBorder ? [tooltipBB.bottom, maxDocBB.bottom] : [closerToTargetBB.bottom, tooltipBB.bottom]; break;\r\n\t}\r\n\treturn Math.floor((moveCloserToWinBorder ? -1 : 1) * (range[1] - range[0]) / 2);\r\n};\r\n\r\nconst modifyTooltipPosition = (increment, targetBB, tooltipEl, tooltipBB, tooltipPos, isLeftOrRight, tooltipMinWidth) => {\r\n\tif (isLeftOrRight) {\r\n\t\tif (tooltipBB.width - increment < tooltipMinWidth) return false;\r\n\t\tconst bkpTooltipBB = { ...tooltipBB };\r\n\r\n\t\ttooltipEl.style.width = round1dec(tooltipBB.width - increment) + 'px';\r\n\r\n\t\tif (tooltipPos.base === 'left') {\r\n\r\n\t\t\tconst newWidth = $(tooltipEl).outerWidth(false);\r\n\t\t\tif (newWidth !== bkpTooltipBB.width) {\r\n\t\t\t\ttooltipEl.style.left = ceil1dec(tooltipBB.left - (newWidth - bkpTooltipBB.width) - targetBB.left) + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\t\tswitch (tooltipPos.align) {\r\n\t\t\tcase 'middle': {\r\n\t\t\t\tconst newHeight = $(tooltipEl).outerHeight(false);\r\n\t\t\t\tif (newHeight !== bkpTooltipBB.height) {\r\n\t\t\t\t\ttooltipEl.style.top = floor1dec((targetBB.height - newHeight) / 2) + 'px';\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'bottom': {\r\n\t\t\t\tconst newHeight = $(tooltipEl).outerHeight(false);\r\n\t\t\t\tif (newHeight !== bkpTooltipBB.height) {\r\n\t\t\t\t\ttooltipEl.style.top = floor1dec(tooltipBB.bottom - newHeight + 1 - targetBB.top) + 'px';\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\telse {\r\n\t\t// adjusting height doesn't automatically change a width ... so changing width instead\r\n\t\tif (tooltipBB.width + increment < tooltipMinWidth) return false;\r\n\t\tconst bkpTooltipHeight = tooltipBB.height;\r\n\t\tconst bkpTooltipWidth = tooltipBB.width;\r\n\t\tconst currentLeft = getCssValFloat(tooltipEl, 'left', 0);\r\n\t\ttooltipEl.style.width = round1dec(tooltipBB.width + increment) + 'px';\r\n\t\tconst newWidth = $(tooltipEl).outerWidth(false);\r\n\t\tconst appliedIncrement = newWidth - bkpTooltipWidth;\r\n\t\tif (bkpTooltipWidth !== newWidth) {\r\n\t\t\tif (tooltipPos.align === 'center') {\r\n\t\t\t\ttooltipEl.style.left = round1dec(currentLeft - (appliedIncrement / 2)) + 'px';\r\n\t\t\t}\r\n\t\t\telse if (tooltipPos.align === 'right') {\r\n\t\t\t\ttooltipEl.style.left = round1dec(tooltipBB.left - appliedIncrement - targetBB.left) + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (tooltipPos.base === 'top') {\r\n\t\t\tconst newHeight = $(tooltipEl).outerHeight(false);\r\n\t\t\tif (newHeight !== bkpTooltipHeight) {\r\n\t\t\t\ttooltipEl.style.top = floor1dec(tooltipBB.top - (newHeight - bkpTooltipHeight) - targetBB.top) + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\treturn true;\r\n};\r\n\r\n\r\nconst returnResult = (isOverHeight, wasPosAdjusted, iterations, dpDebugEn, dbgFailedReason) => {\r\n\tif (dpDebugEn) {\r\n\t\tif (wasPosAdjusted) {\r\n\t\t\tconsole.log('[dpit] GOLDEN RATIO:', `success (by ${iterations} iterations)`);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.log(`[dpit] GOLDEN RATIO: ${dbgFailedReason}`, `iterations: ${iterations}`);\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\twasPosAdjusted,\r\n\t\tisOverHeight\r\n\t};\r\n};\r\n\r\n\r\nconst revertLastModificationAndReturn = (lastTooltipInlineStyle, tooltipEl, lastIsOverHeight, iterations, dpDebugEn, dbgFailedReason) => {\r\n\ttooltipEl.setAttribute('style', lastTooltipInlineStyle);\r\n\titerations--;\r\n\treturn returnResult(lastIsOverHeight, iterations > 0, iterations, dpDebugEn, dbgFailedReason);\r\n};\r\n\r\nconst getInlineStyleOfElement = (tooltipEl) => {\r\n\tlet inlineStyle = tooltipEl.getAttribute('style');\r\n\tif (inlineStyle === null) return false;\r\n\tif (typeof inlineStyle === 'object') inlineStyle = inlineStyle.cssText;\r\n\treturn inlineStyle;\r\n};\r\n\r\n\r\nexport default (targetBB, initTooltipBB, tooltipEl, tooltipPos, maxWinBB, maxDocBB, isFixedPos, tooltipMinWidth, dpDebugEn, maxIterations = 10) => {\r\n\tconst initIsOverHeight = initTooltipBB.height > maxWinBB.height;\r\n\tconst isLeftOrRight = ['left', 'right'].includes(tooltipPos.base);\r\n\r\n\tlet iterations = 0;\r\n\r\n\tlet lastTooltipInlineStyle = getInlineStyleOfElement(tooltipEl);\r\n\r\n\r\n\tlet tooltipBB = { ...initTooltipBB };\r\n\tlet lastTooltipBB = null;\r\n\tlet isOverHeight = initIsOverHeight;\r\n\tlet lastIsOverHeight = null;\r\n\tlet lastFeatureSpaceAround = null;\r\n\r\n\t// Calculate the space around feature\r\n\tlet featureSpaceAround = calculateSpaceAroundFeature(tooltipBB, maxWinBB, isLeftOrRight);\r\n\r\n\twhile (iterations < maxIterations) {\r\n\r\n\t\t// Was algorithm successful so finish ?\r\n\t\tlet isBestPosFound = false;\r\n\t\tif (!isOverHeight) {\r\n\t\t\tif (lastFeatureSpaceAround) {\r\n\t\t\t\tconst featureSpaceAroundDerivation = Math.abs(lastFeatureSpaceAround) - Math.abs(featureSpaceAround);\r\n\t\t\t\tisBestPosFound = Math.abs(featureSpaceAround) <= 0.1 || featureSpaceAroundDerivation <= 0.05;\r\n\t\t\t} else {\r\n\t\t\t\tisBestPosFound = Math.abs(featureSpaceAround) <= 0.03;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (isBestPosFound) return returnResult(isOverHeight, iterations > 0, iterations, dpDebugEn, 'was not needed');\r\n\r\n\t\t// Determine size/position increment by golden ratio\r\n\t\tconst increment = determineGoldenIncrement(\r\n\t\t\tfeatureSpaceAround,\r\n\t\t\tisOverHeight,\r\n\t\t\tisLeftOrRight,\r\n\t\t\tmaxDocBB,\r\n\t\t\ttooltipBB,\r\n\t\t\titerations === 0 ? targetBB : tooltipBB,\r\n\t\t\ttooltipPos\r\n\t\t);\r\n\r\n\t\titerations++;\r\n\t\tlet wasPositionChange = false;\r\n\t\t// Change to new size/position\r\n\t\tif (increment && modifyTooltipPosition(\r\n\t\t\tincrement,\r\n\t\t\ttargetBB,\r\n\t\t\ttooltipEl,\r\n\t\t\ttooltipBB,\r\n\t\t\ttooltipPos,\r\n\t\t\tisLeftOrRight,\r\n\t\t\ttooltipMinWidth,\r\n\t\t\tisFixedPos\r\n\t\t)) {\r\n\t\t\ttooltipBB = DpitBB.fromElement(tooltipEl, isFixedPos);\r\n\t\t\tconst maxArea = maxWinBB;// isFixedPos ? maxWinBB : maxDocBB;\r\n\t\t\tif (tooltipBB && tooltipBB.left >= maxArea.left - 1 && tooltipBB.right <= maxArea.right + 1) {\r\n\t\t\t\twasPositionChange = true;\r\n\t\t\t} else {\r\n\t\t\t\treturn revertLastModificationAndReturn(\r\n\t\t\t\t\tlastTooltipInlineStyle,\r\n\t\t\t\t\ttooltipEl,\r\n\t\t\t\t\tlastIsOverHeight ?? initIsOverHeight,\r\n\t\t\t\t\titerations,\r\n\t\t\t\t\tdpDebugEn,\r\n\t\t\t\t\t'out of win'\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tif (!wasPositionChange || (lastTooltipBB && DpitBB.isEqual(lastTooltipBB, tooltipBB))) {\r\n\t\t\treturn revertLastModificationAndReturn(\r\n\t\t\t\tlastTooltipInlineStyle,\r\n\t\t\t\ttooltipEl,\r\n\t\t\t\tlastIsOverHeight ?? initIsOverHeight,\r\n\t\t\t\titerations,\r\n\t\t\t\tdpDebugEn,\r\n\t\t\t\t'no effect'\r\n\t\t\t);\r\n\t\t}\r\n\t\t// Check over height\r\n\t\tisOverHeight = tooltipBB.height > maxWinBB.height;\r\n\t\tlastFeatureSpaceAround = featureSpaceAround;\r\n\t\tfeatureSpaceAround = calculateSpaceAroundFeature(tooltipBB, maxWinBB, isLeftOrRight);\r\n\t\t// Check not a beneficial golden iteration direction\r\n\t\tif (lastFeatureSpaceAround && !isOverHeight && Math.abs(featureSpaceAround) > Math.abs(lastFeatureSpaceAround)) {\r\n\t\t\treturn revertLastModificationAndReturn(\r\n\t\t\t\tlastTooltipInlineStyle,\r\n\t\t\t\ttooltipEl,\r\n\t\t\t\tlastIsOverHeight ?? initIsOverHeight,\r\n\t\t\t\titerations,\r\n\t\t\t\tdpDebugEn,\r\n\t\t\t\t'worse feature'\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlastTooltipInlineStyle = getInlineStyleOfElement(tooltipEl);\r\n\t\tlastTooltipBB = { ...tooltipBB };\r\n\t\tlastIsOverHeight = isOverHeight;\r\n\t}\r\n\treturn returnResult(initIsOverHeight, false, iterations, dpDebugEn, 'too many iterations');\r\n};"],"sourceRoot":""}